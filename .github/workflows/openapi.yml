name: openapi

# Controls when the workflow will run
on:
  # triggered on a custom event
  repository_dispatch:
    types: [trigger_ci]
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      sdk:
        description: 'SDK to generate (all, java, go, node, python)'
        required: true
        default: 'all'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      release_tags: ${{ steps.compute-release-tag.outputs.result }}
      release_commit: ${{ steps.push-openapi.outputs.release_commit }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup node
        uses: actions/setup-node@v3

      - name: Download json
        run: npm install json

      - name: Download Fern
        run: npm install -g fern-api

      # Runs a single command using the runners shell
      - name: Download swagger, generate postman and push it
        id: push-openapi
        env:
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        run: |
          echo "$GITHUB_WORKSPACE"
          wget https://api.tryvital.io/openapi.json -O- | npx json > ./fern/openapi/openapi.json
          fern generate --group postman --log-level debug
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ./fern/openapi/openapi.json
          git add ./postman/collection.json
          git commit -m "[automated commit] update openapi.json and collection.json"
          git push
          echo "release_commit=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Compute release tag
        id: compute-release-tag
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GH_ADMIN_TOKEN }}"
          result-encoding: json
          script: |
            function semver_lt(lhs, rhs) {
                let left = lhs.split(".").map((str) => parseInt(str))
                let right = rhs.split(".").map((str) => parseInt(str))

                if (left.length != 3 || right.length != 3)
                    throw new Error("not valid semver")
                if (left[0] < right[0])
                    return true
                if (left[0] > right[0])
                    return false
                if (left[1] < right[1])
                    return true
                if (left[1] > right[1])
                    return false
                if (left[2] < right[2])
                    return true

                return false
            }

            function semver_inc(ver) {
                let components = ver.split(".").map((str) => parseInt(str))
                if (components.length != 3) {
                    throw new Error("not valid semver")
                }
                if (components[2] < 999) {
                    components[2] += 1
                } else {
                    components[1] += 1
                    components[2] = 0
                }
                return components.map((n) => n.toString()).join(".")
            }

            try {
                const { data } = await github.rest.repos.listReleases({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                });

                let lastReleases = {
                    java: "0.0.0",
                    go: "0.0.0",
                    node: "0.0.0",
                    python: "0.0.0"
                };

                for (let release of data) {
                    if (release.tag_name.startsWith("java@")) {
                        if (semver_lt(lastReleases.java, release.tag_name)) {
                            lastReleases.java = release.tag_name.split('@')[1];
                        }
                    } else if (release.tag_name.startsWith("go@")) {
                        if (semver_lt(lastReleases.go, release.tag_name)) {
                            lastReleases.go = release.tag_name.split('@')[1];
                        }
                    } else if (release.tag_name.startsWith("node@")) {
                        if (semver_lt(lastReleases.node, release.tag_name)) {
                            lastReleases.node = release.tag_name.split('@')[1];
                        }
                    } else if (release.tag_name.startsWith("python@")) {
                        if (semver_lt(lastReleases.python, release.tag_name)) {
                            lastReleases.python = release.tag_name.split('@')[1];
                        }
                    }
                }

                console.log("Last releases:");
                console.log(lastReleases);

                let bumpedVersions = {};

                for (let lang in lastReleases) {
                    if (lastReleases[lang] == "0.0.0") {
                        core.setFailed("Failed to extract the latest tag for " + lang + " from GitHub releases");
                        return;
                    } else {
                        let bumpedVersion = semver_inc(lastReleases[lang]);
                        console.log("Next " + lang + " release: " + bumpedVersion);
                        bumpedVersions[lang] = bumpedVersion;
                    }
                }

                return bumpedVersions;
            } catch (error) {
                core.setFailed(error.message);
            }

  generate_java:
    needs: setup
    if: ${{ github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.sdk == 'all' || github.event.inputs.sdk == 'java')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ref: ${{ needs.setup.outputs.release_commit }}
          
      - name: Create java tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          RESULT='${{ needs.setup.outputs.release_tags }}'
          JAVA_VERSION=$(echo "$RESULT" | npx json java)
          git tag -a "java@${JAVA_VERSION}" -m "Java SDK ${JAVA_VERSION}"
          git push origin tag "java@${JAVA_VERSION}"

  generate_go:
    needs: setup
    if: ${{ github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.sdk == 'all' || github.event.inputs.sdk == 'go')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ref: ${{ needs.setup.outputs.release_commit }}

      - name: Create go tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          RESULT='${{ needs.setup.outputs.release_tags }}'
          GO_VERSION=$(echo "$RESULT" | npx json go)
          git tag -a "go@${GO_VERSION}" -m "Go SDK ${GO_VERSION}"
          git push origin tag "go@${GO_VERSION}"

  generate_node:
    needs: setup
    if: ${{ github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.sdk == 'all' || github.event.inputs.sdk == 'node')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ref: ${{ needs.setup.outputs.release_commit }}

      - name: Create node tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          RESULT='${{ needs.setup.outputs.release_tags }}'
          NODE_VERSION=$(echo "$RESULT" | npx json node)
          git tag -a "node@${NODE_VERSION}" -m "Node SDK ${NODE_VERSION}"
          git push origin tag "node@${NODE_VERSION}"

  generate_python:
    needs: setup
    if: ${{ github.event_name == 'repository_dispatch' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.sdk == 'all' || github.event.inputs.sdk == 'python')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ref: ${{ needs.setup.outputs.release_commit }}

      - name: Create python tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          RESULT='${{ needs.setup.outputs.release_tags }}'
          PYTHON_VERSION=$(echo "$RESULT" | npx json python)
          git tag -a "python@${PYTHON_VERSION}" -m "Python SDK ${PYTHON_VERSION}"
          git push origin tag "python@${PYTHON_VERSION}"

  notify_slack_on_failure:
    needs: [setup, generate_java, generate_go, generate_node, generate_python]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: Workflow failed: ${{ github.workflow }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Event:*\n${{ github.event_name }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text":{
                        "type": "plain_text",
                        "text": "Inspect Workflow Run"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
